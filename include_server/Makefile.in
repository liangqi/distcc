distcc_srcdir := $(shell make --directory=../distcc --no-print-directory \
                              --silent echo_srcdir)
srcdir := $(shell cd $(distcc_srcdir)/../include_server && pwd)
builddir := $(shell pwd)/build

# Autoconf configuration variables.
VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@
datadir = @datadir@
testdir = $(builddir)/testdir
INSTALL = @INSTALL@
DESTDIR = /
PYTHON = @PYTHON@

.PHONY: all
all: build

.PHONY: build
build:
	cd $(srcdir) && 				\
	BUILDDIR=$(builddir) $(PYTHON) ./setup.py	\
	    build 					\
	       --build-base=$(builddir) 		\
	       --build-temp=$(builddir)

.PHONY: install
install: 
	cd $(srcdir) && 				\
	BUILDDIR=$(builddir) $(PYTHON) ./setup.py 	\
	    build 					\
	       --build-base=$(builddir) 		\
	       --build-temp=$(builddir)			\
	    install 					\
	       --prefix=$(prefix) 			\
	       --record=$(PYTHON_INSTALL_RECORD)    	\
	       --root=$(DESTDIR)

# Below we delete the link and then we recreate it.  Otherwise, a second link
# will be created the second time install-for-tests is run! That's because the
# link name would now be resolved as a target directory (third form according to
# 'man ln'). As a result a link to the test_data directory would be inserted
# into the test_data directory under the name 'test_data'.
.PHONY: install-for-tests
install-for-tests:
	mkdir -p $(testdir)
	if [ -h $(testdir)/test_data ]; then             \
	  rm -f $(testdir)/test_data;                    \
	fi
	ln -s  $(realpath $(srcdir)/test_data)          \
	       $(testdir)/test_data
	cd $(srcdir) && 				\
	BUILDDIR=$(builddir) $(PYTHON) ./setup.py 	\
	    build -f					\
	       --build-base=$(testdir) 			\
	       --build-temp=$(testdir)			\
	    install 					\
	       --install-lib=$(testdir)/python		\
	       --install-scripts=$(testdir)/python


.PHONY: check maintainer-check
check maintainer-check: test

.PHONY: test
test:	install-for-tests \
	c_extensions_test include_server_test macro_eval_test mirror_path_test\
        parse_command_test parse_file_test \
        include_analyzer_test include_analyzer_memoizing_node_test \
	basics_test

.PHONY: c_extensions_test
c_extensions_test: install-for-tests
	cd $(testdir) && PYTHONPATH=$(testdir)/python/include_server $(PYTHON) $(testdir)/python/include_server/c_extensions_test.py \
		> c_extensions_test.out 2>&1
	@echo Filtering c_extensions_test.out
	@cd $(testdir) && cat c_extensions_test.out \
		| grep -v 'distcc_include_server\[.*\] (dcc_r_token_int) ERROR: protocol derailment: expected token "XXXX"' \
		| grep -v 'distcc_include_server\[.*\] (dcc_explain_mismatch) ERROR: error context: "ARGC       2ARGV       6tomatoARGV       7potatos"'
.PHONY: include_server_test
include_server_test: install-for-tests 
	cd $(testdir) && PYTHONPATH=$(testdir)/python/include_server $(PYTHON) $(testdir)/python/include_server/include_server_test.py
.PHONY: macro_eval_test
macro_eval_test: install-for-tests 
	cd $(testdir) && PYTHONPATH=$(testdir)/python/include_server $(PYTHON) $(testdir)/python/include_server/macro_eval_test.py
.PHONY: mirror_path_test
mirror_path_test: install-for-tests 
	cd $(testdir) && PYTHONPATH=$(testdir)/python/include_server $(PYTHON) $(testdir)/python/include_server/mirror_path_test.py
.PHONY: parse_command_test
parse_command_test: install-for-tests
	cd $(testdir) && PYTHONPATH=$(testdir)/python/include_server $(PYTHON) $(testdir)/python/include_server/parse_command_test.py
.PHONY: parse_file_test
parse_file_test: install-for-tests
	cd $(testdir) && PYTHONPATH=$(testdir)/python/include_server $(PYTHON) $(testdir)/python/include_server/parse_file_test.py
.PHONY: include_analyzer_test
include_analyzer_test: install-for-tests 
	cd $(testdir) && PYTHONPATH=$(testdir)/python/include_server $(PYTHON) $(testdir)/python/include_server/include_analyzer_test.py
.PHONY: include_analyzer_memoizing_node_test
include_analyzer_memoizing_node_test: install-for-tests
	cd $(testdir) && PYTHONPATH=$(testdir)/python/include_server $(PYTHON) $(testdir)/python/include_server/include_analyzer_memoizing_node_test.py
.PHONY: basics_test
basics_test: install-for-tests
	cd $(testdir) && PYTHONPATH=$(testdir)/python/include_server $(PYTHON) $(testdir)/python/include_server/basics_test.py

Makefile: Makefile.in config.status
	./config.status

.PHONY: clean
clean:
	$(PYTHON) $(srcdir)/setup.py clean		\
	   --build-base=$(builddir) 			\
	   --build-temp=$(builddir)
	rm -rf $(testdir)

